Design patterns are standard solutions to common problems in software design. They provide templates for writing code that is more flexible, reusable, and easier to maintain. In C#, as in other object-oriented languages, design patterns are used to solve common design issues in a structured and efficient way. Here are some commonly used design patterns in C#:

### 1. **Creational Patterns**

Creational patterns deal with object creation mechanisms, trying to create objects in a manner suitable to the situation.

- **Singleton Pattern**

  Ensures that a class has only one instance and provides a global point of access to it.

  ```csharp
  public class Singleton
  {
      private static Singleton instance;
      private static readonly object lockObj = new object();

      private Singleton() { }

      public static Singleton Instance
      {
          get
          {
              if (instance == null)
              {
                  lock (lockObj)
                  {
                      if (instance == null)
                      {
                          instance = new Singleton();
                      }
                  }
              }
              return instance;
          }
      }
  }
  ```

- **Factory Method Pattern**

  Defines an interface for creating an object but allows subclasses to alter the type of objects that will be created.

  ```csharp
  public abstract class Product
  {
      public abstract string GetName();
  }

  public class ConcreteProductA : Product
  {
      public override string GetName() => "Product A";
  }

  public class ConcreteProductB : Product
  {
      public override string GetName() => "Product B";
  }

  public abstract class Creator
  {
      public abstract Product FactoryMethod();
  }

  public class ConcreteCreatorA : Creator
  {
      public override Product FactoryMethod() => new ConcreteProductA();
  }

  public class ConcreteCreatorB : Creator
  {
      public override Product FactoryMethod() => new ConcreteProductB();
  }
  ```

- **Abstract Factory Pattern**

  Provides an interface for creating families of related or dependent objects without specifying their concrete classes.

  ```csharp
  public interface IProductA
  {
      string GetProductA();
  }

  public interface IProductB
  {
      string GetProductB();
  }

  public class ProductA1 : IProductA
  {
      public string GetProductA() => "Product A1";
  }

  public class ProductB1 : IProductB
  {
      public string GetProductB() => "Product B1";
  }

  public class ProductA2 : IProductA
  {
      public string GetProductA() => "Product A2";
  }

  public class ProductB2 : IProductB
  {
      public string GetProductB() => "Product B2";
  }

  public interface IAbstractFactory
  {
      IProductA CreateProductA();
      IProductB CreateProductB();
  }

  public class ConcreteFactory1 : IAbstractFactory
  {
      public IProductA CreateProductA() => new ProductA1();
      public IProductB CreateProductB() => new ProductB1();
  }

  public class ConcreteFactory2 : IAbstractFactory
  {
      public IProductA CreateProductA() => new ProductA2();
      public IProductB CreateProductB() => new ProductB2();
  }
  ```

### 2. **Structural Patterns**

Structural patterns deal with object composition, creating relationships between objects to form larger structures.

- **Adapter Pattern**

  Converts the interface of a class into another interface that a client expects. It allows classes to work together that couldn’t otherwise because of incompatible interfaces.

  ```csharp
  public interface ITarget
  {
      string Request();
  }

  public class Adaptee
  {
      public string SpecificRequest() => "Specific request";
  }

  public class Adapter : ITarget
  {
      private Adaptee adaptee;

      public Adapter(Adaptee adaptee)
      {
          this.adaptee = adaptee;
      }

      public string Request() => adaptee.SpecificRequest();
  }
  ```

- **Decorator Pattern**

  Adds new functionality to an object dynamically without altering its structure. It provides a flexible alternative to subclassing.

  ```csharp
  public interface IComponent
  {
      string Operation();
  }

  public class ConcreteComponent : IComponent
  {
      public string Operation() => "ConcreteComponent";
  }

  public abstract class Decorator : IComponent
  {
      protected IComponent component;

      protected Decorator(IComponent component)
      {
          this.component = component;
      }

      public abstract string Operation();
  }

  public class ConcreteDecoratorA : Decorator
  {
      public ConcreteDecoratorA(IComponent component) : base(component) { }

      public override string Operation() => $"ConcreteDecoratorA({component.Operation()})";
  }

  public class ConcreteDecoratorB : Decorator
  {
      public ConcreteDecoratorB(IComponent component) : base(component) { }

      public override string Operation() => $"ConcreteDecoratorB({component.Operation()})";
  }
  ```

- **Facade Pattern**

  Provides a simplified interface to a complex subsystem. It hides the complexities of the subsystem from the client.

  ```csharp
  public class SubsystemA
  {
      public void OperationA() => Console.WriteLine("Subsystem A operation");
  }

  public class SubsystemB
  {
      public void OperationB() => Console.WriteLine("Subsystem B operation");
  }

  public class Facade
  {
      private SubsystemA subsystemA;
      private SubsystemB subsystemB;

      public Facade()
      {
          subsystemA = new SubsystemA();
          subsystemB = new SubsystemB();
      }

      public void Operation() 
      {
          subsystemA.OperationA();
          subsystemB.OperationB();
      }
  }
  ```

### 3. **Behavioral Patterns**

Behavioral patterns deal with object collaboration and responsibility delegation.

- **Observer Pattern**

  Defines a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.

  ```csharp
  public interface IObserver
  {
      void Update(string message);
  }

  public class ConcreteObserver : IObserver
  {
      public void Update(string message) => Console.WriteLine("Observer received: " + message);
  }

  public class Subject
  {
      private List<IObserver> observers = new List<IObserver>();

      public void Attach(IObserver observer) => observers.Add(observer);

      public void Detach(IObserver observer) => observers.Remove(observer);

      public void Notify(string message)
      {
          foreach (var observer in observers)
          {
              observer.Update(message);
          }
      }
  }
  ```

- **Strategy Pattern**

  Defines a family of algorithms, encapsulates each one, and makes them interchangeable. It allows the algorithm to vary independently from clients that use it.

  ```csharp
  public interface IStrategy
  {
      void Execute();
  }

  public class ConcreteStrategyA : IStrategy
  {
      public void Execute() => Console.WriteLine("Strategy A");
  }

  public class ConcreteStrategyB : IStrategy
  {
      public void Execute() => Console.WriteLine("Strategy B");
  }

  public class Context
  {
      private IStrategy strategy;

      public Context(IStrategy strategy)
      {
          this.strategy = strategy;
      }

      public void SetStrategy(IStrategy strategy)
      {
          this.strategy = strategy;
      }

      public void ExecuteStrategy() => strategy.Execute();
  }
  ```

- **Command Pattern**

  Encapsulates a request as an object, thereby allowing parameterization of clients with queues, requests, and operations.

  ```csharp
  public interface ICommand
  {
      void Execute();
  }

  public class Light
  {
      public void TurnOn() => Console.WriteLine("Light is on");
      public void TurnOff() => Console.WriteLine("Light is off");
  }

  public class LightOnCommand : ICommand
  {
      private Light light;

      public LightOnCommand(Light light)
      {
          this.light = light;
      }

      public void Execute() => light.TurnOn();
  }

  public class LightOffCommand : ICommand
  {
      private Light light;

      public LightOffCommand(Light light)
      {
          this.light = light;
      }

      public void Execute() => light.TurnOff();
  }

  public class RemoteControl










Certainly! Here’s an extended overview of additional design patterns in C#, including some that were previously mentioned in brief, as well as a few more:

### **Behavioral Patterns (continued)**

- **Chain of Responsibility Pattern**

  Allows an object to pass a request along a chain of potential handlers. Each handler can either process the request or pass it to the next handler in the chain.

  ```csharp
  public abstract class Handler
  {
      protected Handler successor;

      public void SetSuccessor(Handler successor)
      {
          this.successor = successor;
      }

      public abstract void HandleRequest(int request);
  }

  public class ConcreteHandlerA : Handler
  {
      public override void HandleRequest(int request)
      {
          if (request < 10)
          {
              Console.WriteLine("Handler A handled request " + request);
          }
          else if (successor != null)
          {
              successor.HandleRequest(request);
          }
      }
  }

  public class ConcreteHandlerB : Handler
  {
      public override void HandleRequest(int request)
      {
          if (request >= 10)
          {
              Console.WriteLine("Handler B handled request " + request);
          }
          else if (successor != null)
          {
              successor.HandleRequest(request);
          }
      }
  }
  ```

- **Template Method Pattern**

  Defines the skeleton of an algorithm in a base class but lets subclasses override certain steps of the algorithm without changing its structure.

  ```csharp
  public abstract class AbstractClass
  {
      public void TemplateMethod()
      {
          Step1();
          Step2();
          Step3();
      }

      protected abstract void Step1();
      protected abstract void Step2();

      private void Step3()
      {
          Console.WriteLine("Step 3 executed");
      }
  }

  public class ConcreteClass : AbstractClass
  {
      protected override void Step1() => Console.WriteLine("Step 1 executed");
      protected override void Step2() => Console.WriteLine("Step 2 executed");
  }
  ```

- **Memento Pattern**

  Provides the ability to restore an object’s state to a previous state without exposing the details of its implementation.

  ```csharp
  public class Memento
  {
      public string State { get; }

      public Memento(string state)
      {
          State = state;
      }
  }

  public class Originator
  {
      public string State { get; set; }

      public Memento SaveStateToMemento() => new Memento(State);

      public void GetStateFromMemento(Memento memento) => State = memento.State;
  }

  public class Caretaker
  {
      private Memento memento;

      public void SaveState(Originator originator) => memento = originator.SaveStateToMemento();

      public void RestoreState(Originator originator) => originator.GetStateFromMemento(memento);
  }
  ```

- **Interpreter Pattern**

  Provides a way to evaluate language grammar or expressions. Useful for designing languages, interpreters, and compilers.

  ```csharp
  public interface IExpression
  {
      bool Interpret(string context);
  }

  public class TerminalExpression : IExpression
  {
      private string data;

      public TerminalExpression(string data)
      {
          this.data = data;
      }

      public bool Interpret(string context) => context.Contains(data);
  }

  public class OrExpression : IExpression
  {
      private IExpression expr1;
      private IExpression expr2;

      public OrExpression(IExpression expr1, IExpression expr2)
      {
          this.expr1 = expr1;
          this.expr2 = expr2;
      }

      public bool Interpret(string context) => expr1.Interpret(context) || expr2.Interpret(context);
  }
  ```

### **Additional Patterns**

- **Builder Pattern**

  Separates the construction of a complex object from its representation, allowing the same construction process to create different representations.

  ```csharp
  public class Product
  {
      public string PartA { get; set; }
      public string PartB { get; set; }
      public string PartC { get; set; }
  }

  public abstract class Builder
  {
      public abstract void BuildPartA();
      public abstract void BuildPartB();
      public abstract void BuildPartC();
      public abstract Product GetResult();
  }

  public class ConcreteBuilder : Builder
  {
      private Product product = new Product();

      public override void BuildPartA() => product.PartA = "PartA";
      public override void BuildPartB() => product.PartB = "PartB";
      public override void BuildPartC() => product.PartC = "PartC";

      public override Product GetResult() => product;
  }

  public class Director
  {
      private Builder builder;

      public Director(Builder builder)
      {
          this.builder = builder;
      }

      public void Construct()
      {
          builder.BuildPartA();
          builder.BuildPartB();
          builder.BuildPartC();
      }
  }
  ```

- **Prototype Pattern**

  Allows an object to create a copy of itself without knowing the details of how to create the object.

  ```csharp
  public abstract class Prototype
  {
      public abstract Prototype Clone();
  }

  public class ConcretePrototype : Prototype
  {
      public string Name { get; set; }

      public override Prototype Clone()
      {
          return (Prototype)this.MemberwiseClone();
      }
  }
  ```

### Summary

Design patterns are essential for creating robust, maintainable, and scalable software systems. They provide solutions to common design problems and improve code organization. In C#, you can leverage these patterns to address various aspects of software design:

- **Creational Patterns**: Focus on object creation (e.g., Singleton, Factory Method, Abstract Factory).
- **Structural Patterns**: Deal with object composition (e.g., Adapter, Decorator, Facade).
- **Behavioral Patterns**: Handle object interaction and responsibility (e.g., Observer, Strategy, Command).

Applying these patterns appropriately helps in designing flexible and easily extensible systems, enhancing the overall quality of your software architecture.
